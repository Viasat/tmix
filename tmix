#!/usr/bin/env python
"""
selector_path:
    [USER/][SERVER_LABEL,][SESSION:]
USER -> current user
SERVER_LABEL -> "default"
SESSION -> according to tmux default rules
"""

import os, sys, string, grp, pwd, time, subprocess, re
from getopt import *
from itertools import *
from commands import *
from os.path import *

def usage():
    print """tmix usage:
    %(prog_name)s [ SELECTOR_PATH ] [ <TMUX_OPTARGS> ]
    tmix wraps tmux in order to provide convenient pairing features for teams.
    tmix supports the same options/arguments as tmux core, adding only
    a SELECTOR_PATH that (when present) must be the first argument.
    SELECTOR_PATH takes this form:
        [USER/][SERVER_LABEL,][SESSION:]
        USER -> current user
        SERVER_LABEL -> "default"
        SESSION -> according to tmux default rules
    SELECTOR_PATH defaults to: <username>/default,
    Environment Variables
        You may wish to set these to change tmix's behavior.
        TMIX_TMUX  : Set this to control which tmux executable is used.
                     (Default: "tmux" in your $PATH)
        TMIX_DEBUG : Set this to see debugging output (including the resulting
                     tmux command). (Default: "")
        TMIX_QUIET : Set this to prevent announcements being made in tmux about
                     your joining the session. (Default: "")
    Common use cases:
        # start a new tmix with default SELECTOR_PATH
        %(prog_name)s new
        # start new tmix with SERVER_LABEL "wocket"
        # The tmux socket in this case will be ${TMIX_SOCKPATH}/${TMIX_PREFIX}-<username>/wocket.
        %(prog_name)s moquist/wocket, new
        # start new tmix with SERVER_LABEL "wocket" and session named "jam"
        %(prog_name)s moquist/wocket,jam new
        # start new tmix with SERVER_LABEL named "default" and session named "jam"
        %(prog_name)s moquist/jam new
        # join moquist's default tmix session (these are identical)
        %(prog_name)s moquist/
        %(prog_name)s moquist/default,
        # join moquist's "jam" session
        %(prog_name)s moquist/jam
        # secretly join moquist's "jam" session
        TMIX_QUIET=true %(prog_name)s moquist/jam
The following output is from tmux itself, showing its supported options and
    arguments:
    """ % {"prog_name": sys.argv[0]}
    os.execvp(tmix_tmux, [tmix_tmux, "--help"])

tmix_sockpath = os.getenv('TMIX_SOCKPATH','/tmp')
tmix_prefix = os.getenv('TMIX_PREFIX','tmix-')
tmix_acls = os.getenv('TMIX_ACLS','g:domain^users:rw-, g:mail^only^users:rw-')
tmix_tmux = os.getenv('TMIX_TMUX','tmux')
tmix_debug = os.getenv('TMIX_DEBUG','')
tmix_quiet = os.getenv('TMIX_QUIET','')

tmux_session = os.getenv('TMUX',False)

tmix_path = dirname(abspath(sys.argv[0]))

def output_opts(opt_dict, opt_flags):
    l = []
    for k, v in opt_dict.iteritems():
        l.append(k)
        if k not in opt_flags:
            l.append(v)
    return l

# Strangely, os.getlogin() doesn't work inside of tmux...
user = me = pwd.getpwuid(os.getuid())[0]
args = sys.argv
label = "default"
session = ""

# The below getop_flags is from tmux.c
getopt_list = "28c:df:lL:qS:uUvV"
getopt_flag_letters = re.findall("[^:](?!:)", getopt_list)
getopt_flags = list('-'+o for o in getopt_flag_letters)
try:
    optlist, arglist = gnu_getopt(args[1:], '+'+getopt_list)
except GetoptError:
    # tmux itself has no -h or --help option, and prints usage when you pass
    # invalid options/arguments. Do the same thing.
    usage()

# Buck out and exec tmux if you're in a session
# Wait to do this until after getopt in case we wanted usage()
# TODO: This isn't quite right. It would still be nice to use the
# selector path...
if tmux_session:
    os.execvp(tmix_tmux, [tmix_tmux] + sys.argv[1:])

opt_dict = dict(optlist)
if arglist:
    sel = arglist[0]
else:
    sel = ''

if opt_dict.has_key('-S'):
    raise Exception("Cannot override tmix -S option.")

if opt_dict.has_key('-L'):
    label = opt_dict['-L']
    del opt_dict['-L']

if set("/,:").intersection(set(sel)):
    first,sep,rest = sel.partition("/")
    if sep:
        user = first
        sel = rest
        try: pwd.getpwnam(user)
        except: raise Exception('User "%s" does not exist.' % user)
    first,sep,rest = sel.partition(",")
    if sep:
        label = first
        sel = rest
    session = sel
    if arglist[1:]:
        tmux_cmds = arglist[1:]
    else:
        tmux_cmds = ['attach', '-t', session]
else:
    tmux_cmds = arglist or ['attach']

tpath_dir = tmix_sockpath + '/' + tmix_prefix + user
tpath = tpath_dir + '/' + label

opt_dict['-S'] = tpath
final_opt_list = output_opts(opt_dict, getopt_flags)

acl_cmd = []
if user == me:
    if not os.access(tpath_dir, os.F_OK):
        os.mkdir(tpath_dir)
    os.chmod(tpath_dir, 0755)
    # NOOP to test if server is running (presumably with properly ACL'd socket.
    status, out = getstatusoutput(' '.join([tmix_tmux] + final_opt_list) + 'display -p ""')
    if not 0 == status:
        if tmix_debug: print "Setting ACLs"
        acl_cmd = ['start-server', ';', 'run', 'setfacl -m %(tmix_acls)s %(tpath)s' % locals(), ';']

cmdline =  [tmix_tmux] + final_opt_list
cmdline += acl_cmd
cmdline += tmux_cmds

if not tmix_quiet:
    cmdline += [';', 'run', '%s/tmix_broadcast %s' % (tmix_path, me + " joined")]

if tmix_debug: print "cmdline", cmdline
os.execvp(tmix_tmux, cmdline)
